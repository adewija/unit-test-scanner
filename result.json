[
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/partners/bp/converter/CreateBusinessPartnerToBusinessPartnerConverterTest.java",
    "injectedMockScanResult": {
      "className": "CreateBusinessPartnerToBusinessPartnerConverterBean",
      "classDeclaration": "createBusinessPartnerToBusinessPartnerConverterBean"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 204,
        "supermethodName": "convert_TypeIsStoreAndRelationTypesNotEmpty_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().relationTypes(Arrays.asList(\"STORE\")).build())",
            "lineNumber": "206-208",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().relationTypes(Arrays.asList(\"STORE\")).build()) at Line: 206-208"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 267,
        "supermethodName": "convert_TypeIsSupplierAndRelationTypesNotEmpty_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().relationTypes(Arrays.asList(\"SUPPLIER\")).build())",
            "lineNumber": "269-271",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().relationTypes(Arrays.asList(\"SUPPLIER\")).build()) at Line: 269-271"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 311,
        "supermethodName": "convert_TypeIsCustomerAndRelationTypesNotEmpty_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().relationTypes(Arrays.asList(\"CUSTOMER\")).build())",
            "lineNumber": "313-315",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().relationTypes(Arrays.asList(\"CUSTOMER\")).build()) at Line: 313-315"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/partners/bp/inbound/kafka/PickupPointChangesKafkaSubscriberTest.java",
    "injectedMockScanResult": {
      "className": "PickupPointChangesKafkaSubscriberBean",
      "classDeclaration": "pickupPointChangesKafkaSubscriberBean"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 49,
        "supermethodName": "onDomainEventConsumed_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointChangeToPickupPointConverter).convert(Mockito.any(PickupPointChange.class))",
            "lineNumber": "53-54",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointChangeToPickupPointConverter).convert(Mockito.any(PickupPointChange.class)) at Line: 53-54"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).update(Mockito.any(PickupPointV1.class))",
            "lineNumber": "56",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).update(Mockito.any(PickupPointV1.class)) at Line: 56"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 59,
        "supermethodName": "onDomainEventConsumed_PickupPointNotExists_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.pickupPointService.findByCode(Mockito.anyString(),Mockito.anyString())).thenReturn(null)",
            "lineNumber": "61-62",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.pickupPointService.findByCode(Mockito.anyString(),Mockito.anyString())).thenReturn(null) at Line: 61-62"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointChangeToPickupPointConverter).convert(Mockito.any(PickupPointChange.class))",
            "lineNumber": "65-66",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointChangeToPickupPointConverter).convert(Mockito.any(PickupPointChange.class)) at Line: 65-66"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).create(Mockito.any(PickupPointV1.class))",
            "lineNumber": "68",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).create(Mockito.any(PickupPointV1.class)) at Line: 68"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 71,
        "supermethodName": "onDomainEventConsumed_PickupPointServiceThrowException_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doThrow(Exception.class).when(this.pickupPointService).update(Mockito.any(PickupPointV1.class))",
            "lineNumber": "73-74",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.doThrow(Exception.class).when(this.pickupPointService).update(Mockito.any(PickupPointV1.class)) at Line: 73-74"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointChangeToPickupPointConverter).convert(Mockito.any(PickupPointChange.class))",
            "lineNumber": "77-78",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointChangeToPickupPointConverter).convert(Mockito.any(PickupPointChange.class)) at Line: 77-78"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).update(Mockito.any(PickupPointV1.class))",
            "lineNumber": "80",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).update(Mockito.any(PickupPointV1.class)) at Line: 80"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/partners/bp/inbound/kafka/BusinessPartnerCreationKafkaSubscriberTest.java",
    "injectedMockScanResult": {
      "className": "BusinessPartnerCreationKafkaSubscriberBean",
      "classDeclaration": "businessPartnerCreationKafkaSubscriberBean"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 47,
        "supermethodName": "onDomainEventConsumed_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class))",
            "lineNumber": "51-52",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class)) at Line: 51-52"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class))",
            "lineNumber": "53-54",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class)) at Line: 53-54"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 57,
        "supermethodName": "onDomainEventConsumed_BusinessPartnerServiceThrowException_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doThrow(Exception.class).when(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class))",
            "lineNumber": "60-61",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.doThrow(Exception.class).when(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class)) at Line: 60-61"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class))",
            "lineNumber": "64-65",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class)) at Line: 64-65"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class))",
            "lineNumber": "66-67",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class)) at Line: 66-67"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/partners/bp/inbound/kafka/PickupPointCreationKafkaSubscriberTest.java",
    "injectedMockScanResult": {
      "className": "PickupPointCreationKafkaSubscriberBean",
      "classDeclaration": "pickupPointCreationKafkaSubscriberBean"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 49,
        "supermethodName": "onDomainEventConsumed_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerAddPickupPointToPickupPointsConverter).convert(Mockito.any(BusinessPartnerAddPickupPoint.class))",
            "lineNumber": "53-54",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerAddPickupPointToPickupPointsConverter).convert(Mockito.any(BusinessPartnerAddPickupPoint.class)) at Line: 53-54"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).create(Mockito.any(PickupPointV1.class))",
            "lineNumber": "55",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).create(Mockito.any(PickupPointV1.class)) at Line: 55"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 58,
        "supermethodName": "onDomainEventConsumed_PickupPointServiceThrowException_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doThrow(Exception.class).when(this.pickupPointService).create(Mockito.any(PickupPointV1.class))",
            "lineNumber": "60-61",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.doThrow(Exception.class).when(this.pickupPointService).create(Mockito.any(PickupPointV1.class)) at Line: 60-61"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerAddPickupPointToPickupPointsConverter).convert(Mockito.any(BusinessPartnerAddPickupPoint.class))",
            "lineNumber": "64-65",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerAddPickupPointToPickupPointsConverter).convert(Mockito.any(BusinessPartnerAddPickupPoint.class)) at Line: 64-65"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).create(Mockito.any(PickupPointV1.class))",
            "lineNumber": "66",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).create(Mockito.any(PickupPointV1.class)) at Line: 66"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/partners/bp/inbound/kafka/BusinessPartnerChangesKafkaSubscriberTest.java",
    "injectedMockScanResult": {
      "className": "BusinessPartnerChangesKafkaSubscriberBean",
      "classDeclaration": "businessPartnerChangesKafkaSubscriberBean"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 51,
        "supermethodName": "onDomainEventConsumed_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class))",
            "lineNumber": "55-56",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class)) at Line: 55-56"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerService).update(Mockito.anyString(),Mockito.anyString(),Mockito.any(BusinessPartner.class))",
            "lineNumber": "58-59",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerService).update(Mockito.anyString(),Mockito.anyString(),Mockito.any(BusinessPartner.class)) at Line: 58-59"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 62,
        "supermethodName": "onDomainEventConsumed_BusinessPartnerNotExists_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerService.findByCode(Mockito.anyString(),Mockito.anyString())).thenReturn(null)",
            "lineNumber": "64-65",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerService.findByCode(Mockito.anyString(),Mockito.anyString())).thenReturn(null) at Line: 64-65"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class))",
            "lineNumber": "68-69",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class)) at Line: 68-69"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class))",
            "lineNumber": "71-72",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerService).create(Mockito.anyString(),Mockito.any(BusinessPartner.class)) at Line: 71-72"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 75,
        "supermethodName": "onDomainEventConsumed_BusinessPartnerServiceThrowException_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doThrow(Exception.class).when(this.businessPartnerService).update(Mockito.anyString(),Mockito.anyString(),Mockito.any(BusinessPartner.class))",
            "lineNumber": "78-79",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.doThrow(Exception.class).when(this.businessPartnerService).update(Mockito.anyString(),Mockito.anyString(),Mockito.any(BusinessPartner.class)) at Line: 78-79"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class))",
            "lineNumber": "82-83",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerChangeToBusinessPartnerConverter).convert(Mockito.any(BusinessPartnerChange.class)) at Line: 82-83"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerService).update(Mockito.anyString(),Mockito.anyString(),Mockito.any(BusinessPartner.class))",
            "lineNumber": "85-86",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerService).update(Mockito.anyString(),Mockito.anyString(),Mockito.any(BusinessPartner.class)) at Line: 85-86"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/partners/bp/service/businesspartner/BusinessPartnerServiceTest.java",
    "injectedMockScanResult": {
      "className": "BusinessPartnerServiceBean",
      "classDeclaration": "businessPartnerServiceBean"
    },
    "mockScanResultList": [
      {
        "mockName": "createBusinessPartnerToBusinessPartnerConverter",
        "lineNumber": "55-56",
        "errorMessage": "Couldn't Find Matching VerifyNoMoreInteractions Method for : createBusinessPartnerToBusinessPartnerConverter at Line: 55-56"
      }
    ],
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 193,
        "supermethodName": "create_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.createBusinessPartnerToBusinessPartnerConverter).convert(Mockito.eq(null),Mockito.any(BusinessPartner.class))",
            "lineNumber": "196-197",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.createBusinessPartnerToBusinessPartnerConverter).convert(Mockito.eq(null),Mockito.any(BusinessPartner.class)) at Line: 196-197"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "198",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 198"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "199-200",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 199-200"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "201-202",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 201-202"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "203-204",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 203-204"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 207,
        "supermethodName": "update_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.updateBusinessPartnerToBusinessPartnerConverter).convert(Mockito.eq(null),Mockito.eq(null),Mockito.any(BusinessPartner.class),Mockito.any(BusinessPartner.class))",
            "lineNumber": "212-214",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.updateBusinessPartnerToBusinessPartnerConverter).convert(Mockito.eq(null),Mockito.eq(null),Mockito.any(BusinessPartner.class),Mockito.any(BusinessPartner.class)) at Line: 212-214"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "215",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 215"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "216-217",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 216-217"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "218-219",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 218-219"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "220-221",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 220-221"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 252,
        "supermethodName": "clearCacheByCode_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "257-258",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 257-258"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 279,
        "supermethodName": "clearCacheByBusinessPartner_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "282-283",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 282-283"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 286,
        "supermethodName": "publish_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository,BusinessPartnerServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class))",
            "lineNumber": "289-290",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository,BusinessPartnerServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class)) at Line: 289-290"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter,BusinessPartnerServiceTest.CALLED_TWICE).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "291-292",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter,BusinessPartnerServiceTest.CALLED_TWICE).convert(Mockito.any(BusinessPartner.class)) at Line: 291-292"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher,BusinessPartnerServiceTest.CALLED_TWICE).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "293-295",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher,BusinessPartnerServiceTest.CALLED_TWICE).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 293-295"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 300,
        "supermethodName": "publish_KafkaPublisherThrowException_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doThrow(Exception.class).when(this.kafkaPublisher).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "302-304",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.doThrow(Exception.class).when(this.kafkaPublisher).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 302-304"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository,BusinessPartnerServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class))",
            "lineNumber": "306-307",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository,BusinessPartnerServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class)) at Line: 306-307"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter,BusinessPartnerServiceTest.CALLED_TWICE).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "308-309",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter,BusinessPartnerServiceTest.CALLED_TWICE).convert(Mockito.any(BusinessPartner.class)) at Line: 308-309"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher,BusinessPartnerServiceTest.CALLED_TWICE).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "310-312",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher,BusinessPartnerServiceTest.CALLED_TWICE).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 310-312"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 317,
        "supermethodName": "publishByCode_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "322-323",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 322-323"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "324-326",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartnerKafka.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 324-326"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 349,
        "supermethodName": "resign_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "359-360",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 359-360"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class))",
            "lineNumber": "362-363",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class)) at Line: 362-363"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 392,
        "supermethodName": "deactivate_TypeIsBusinessPartner_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "403-404",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 403-404"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class))",
            "lineNumber": "405-406",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class)) at Line: 405-406"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any())",
            "lineNumber": "407",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any()) at Line: 407"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 427,
        "supermethodName": "deactivate_TypeIsClickAndCollectAndStoreCommissionTypeIsCM_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class))",
            "lineNumber": "439-440",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class)) at Line: 439-440"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any())",
            "lineNumber": "441",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any()) at Line: 441"
          },
          {
            "methodCalledName": "assertEquals",
            "methodCalledArguments": "Assert.assertEquals(pickupPoint.isClickAndCollect(),false);",
            "lineNumber": "450",
            "errorMessage": "Don't use false as an argument for : Assert.assertEquals(pickupPoint.isClickAndCollect(),false); at Line 450"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "452-453",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 452-453"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).deactivate(Mockito.eq(\"CLICK-AND-COLLECT\"),Mockito.anyString())",
            "lineNumber": "454-455",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).deactivate(Mockito.eq(\"CLICK-AND-COLLECT\"),Mockito.anyString()) at Line: 454-455"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 458,
        "supermethodName": "deactivate_TypeIsClickAndCollectAndStoreCommissionTypeIsRB_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class))",
            "lineNumber": "471-472",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(),Mockito.anyString(),Mockito.eq(BusinessPartnerKafka.class)) at Line: 471-472"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any())",
            "lineNumber": "473",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any()) at Line: 473"
          },
          {
            "methodCalledName": "assertEquals",
            "methodCalledArguments": "Assert.assertEquals(pickupPoint.isClickAndCollect(),false);",
            "lineNumber": "482",
            "errorMessage": "Don't use false as an argument for : Assert.assertEquals(pickupPoint.isClickAndCollect(),false); at Line 482"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "484-485",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 484-485"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).deactivate(Mockito.eq(\"CLICK-AND-COLLECT\"),Mockito.anyString())",
            "lineNumber": "486-487",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).deactivate(Mockito.eq(\"CLICK-AND-COLLECT\"),Mockito.anyString()) at Line: 486-487"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 510,
        "supermethodName": "activate_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "516",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 516"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "517-518",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 517-518"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "519-520",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 519-520"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "521-522",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 521-522"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 550,
        "supermethodName": "activate_TypeIsClickAndCollect_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "557",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 557"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "558-559",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 558-559"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "560-561",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 560-561"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "562-563",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 562-563"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 566,
        "supermethodName": "activate_TypeIsClickAndCollectAndStoreCodeNotEquals_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().stores(Arrays.asList(BusinessPartnerStore.builder().build())).build())",
            "lineNumber": "568-572",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().stores(Arrays.asList(BusinessPartnerStore.builder().build())).build()) at Line: 568-572"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "578",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 578"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "579-580",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 579-580"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "581-582",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 581-582"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "583-584",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 583-584"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 587,
        "supermethodName": "activate_TypeIsStore_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "593",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 593"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "594-595",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 594-595"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "596-597",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 596-597"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "598-599",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 598-599"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 602,
        "supermethodName": "activate_TypeIsStoreAndStoreCodeNotEquals_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().stores(Arrays.asList(BusinessPartnerStore.builder().build())).build())",
            "lineNumber": "604-608",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().stores(Arrays.asList(BusinessPartnerStore.builder().build())).build()) at Line: 604-608"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "613",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 613"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "614-615",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 614-615"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "616-617",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 616-617"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "618-619",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 618-619"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 622,
        "supermethodName": "activate_TypeIsSupplier_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "628",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 628"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "629-630",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 629-630"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "631-632",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 631-632"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "633-634",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 633-634"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 637,
        "supermethodName": "activate_TypeIsSupplierAndSupplierCodeNotEquals_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndSupplierCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().suppliers(Arrays.asList(BusinessPartnerSupplier.builder().build())).build())",
            "lineNumber": "639-642",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndSupplierCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().suppliers(Arrays.asList(BusinessPartnerSupplier.builder().build())).build()) at Line: 639-642"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "647",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 647"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "648-649",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 648-649"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "650-651",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 650-651"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "652-653",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 652-653"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 656,
        "supermethodName": "activate_TypeIsCustomer_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "662",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 662"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString())",
            "lineNumber": "663-664",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_FOUR_TIMES).delete(Mockito.anyString()) at Line: 663-664"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "665-666",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 665-666"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "667-668",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 667-668"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 671,
        "supermethodName": "activate_TypeIsCustomerAndCustomerCodeNotEquals_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndCustomerCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().customers(Arrays.asList(BusinessPartnerCustomer.builder().build())).build())",
            "lineNumber": "673-676",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndCustomerCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().customers(Arrays.asList(BusinessPartnerCustomer.builder().build())).build()) at Line: 673-676"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "681",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 681"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "682-683",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,BusinessPartnerServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 682-683"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class))",
            "lineNumber": "684-685",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerToBusinessPartnerKafkaConverter).convert(Mockito.any(BusinessPartner.class)) at Line: 684-685"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "686-687",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(BusinessPartner.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 686-687"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/partners/bp/service/pickuppoint/PickupPointServiceTest.java",
    "injectedMockScanResult": {
      "className": "PickupPointServiceBean",
      "classDeclaration": "pickupPointServiceBean"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 183,
        "supermethodName": "create_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_STORE_CODE))",
            "lineNumber": "188-190",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_STORE_CODE)) at Line: 188-190"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).countByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_CODE))",
            "lineNumber": "191-193",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).countByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_CODE)) at Line: 191-193"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class))",
            "lineNumber": "194",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class)) at Line: 194"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "195",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 195"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "196-197",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class)) at Line: 196-197"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "198-199",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 198-199"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "200-202",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 200-202"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 205,
        "supermethodName": "create_StoresIsEmpty_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.businessPartnerRepository.findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().build())",
            "lineNumber": "207-209",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.businessPartnerRepository.findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyString())).thenReturn(BusinessPartner.builder().build()) at Line: 207-209"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_STORE_CODE))",
            "lineNumber": "213-215",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).findByStoreIdAndStoreCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_STORE_CODE)) at Line: 213-215"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).countByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_CODE))",
            "lineNumber": "216-218",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).countByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_CODE)) at Line: 216-218"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class))",
            "lineNumber": "219",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class)) at Line: 219"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class))",
            "lineNumber": "220",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.businessPartnerRepository).save(Mockito.any(BusinessPartner.class)) at Line: 220"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "221-222",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class)) at Line: 221-222"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "223-224",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 223-224"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "225-227",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 225-227"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 296,
        "supermethodName": "update_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.updatePickupPointToPickupPointConverter).convert(Mockito.any(PickupPointV1.class),Mockito.any(PickupPointV1.class))",
            "lineNumber": "304-305",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.updatePickupPointToPickupPointConverter).convert(Mockito.any(PickupPointV1.class),Mockito.any(PickupPointV1.class)) at Line: 304-305"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class))",
            "lineNumber": "306",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class)) at Line: 306"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_THREE_TIMES).delete(Mockito.anyString())",
            "lineNumber": "307-308",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_THREE_TIMES).delete(Mockito.anyString()) at Line: 307-308"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "309-310",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class)) at Line: 309-310"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "311-313",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 311-313"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 347,
        "supermethodName": "clearCacheByCode_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "352-353",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 352-353"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 373,
        "supermethodName": "clearCacheByPickupPoint_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "376-377",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 376-377"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 380,
        "supermethodName": "publish_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository,PickupPointServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class))",
            "lineNumber": "383-384",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository,PickupPointServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class)) at Line: 383-384"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter,PickupPointServiceTest.CALLED_TWICE).convert(Mockito.any(PickupPoint.class))",
            "lineNumber": "385-386",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter,PickupPointServiceTest.CALLED_TWICE).convert(Mockito.any(PickupPoint.class)) at Line: 385-386"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher,PickupPointServiceTest.CALLED_TWICE).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "387-389",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher,PickupPointServiceTest.CALLED_TWICE).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 387-389"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 394,
        "supermethodName": "publish_KafkaPublisherThrowException_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doThrow(Exception.class).when(this.kafkaPublisher).publish(Mockito.any(PickupPointV1.class),Mockito.anyString(),Mockito.any(Class.class))",
            "lineNumber": "396-397",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.doThrow(Exception.class).when(this.kafkaPublisher).publish(Mockito.any(PickupPointV1.class),Mockito.anyString(),Mockito.any(Class.class)) at Line: 396-397"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository,PickupPointServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class))",
            "lineNumber": "399-400",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository,PickupPointServiceTest.CALLED_TWICE).findByStoreIdAndMarkForDeleteFalse(Mockito.anyString(),Mockito.any(Pageable.class)) at Line: 399-400"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter,PickupPointServiceTest.CALLED_TWICE).convert(Mockito.any(PickupPoint.class))",
            "lineNumber": "401-402",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter,PickupPointServiceTest.CALLED_TWICE).convert(Mockito.any(PickupPoint.class)) at Line: 401-402"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher,PickupPointServiceTest.CALLED_TWICE).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "403-405",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher,PickupPointServiceTest.CALLED_TWICE).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 403-405"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 410,
        "supermethodName": "publishByCode_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_CODE))",
            "lineNumber": "413-415",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).findByStoreIdAndCodeAndMarkForDeleteFalse(Mockito.anyString(),Mockito.eq(PickupPointServiceTest.DEFAULT_CODE)) at Line: 413-415"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "416-417",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class)) at Line: 416-417"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "418-420",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 418-420"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 445,
        "supermethodName": "deactivate_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class))",
            "lineNumber": "454",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class)) at Line: 454"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "455-457",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 455-457"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "458-459",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 458-459"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "460-461",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class)) at Line: 460-461"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 469,
        "supermethodName": "activate_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class))",
            "lineNumber": "477",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class)) at Line: 477"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "478-479",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 478-479"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "480-481",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class)) at Line: 480-481"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "482-484",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 482-484"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 487,
        "supermethodName": "activate_TypeIsNone_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository,PickupPointServiceTest.NEVER_CALLED).save(Mockito.any(PickupPointV1.class))",
            "lineNumber": "495-496",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository,PickupPointServiceTest.NEVER_CALLED).save(Mockito.any(PickupPointV1.class)) at Line: 495-496"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.NEVER_CALLED).delete(Mockito.anyString())",
            "lineNumber": "497-498",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.NEVER_CALLED).delete(Mockito.anyString()) at Line: 497-498"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter,PickupPointServiceTest.NEVER_CALLED).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "499-500",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter,PickupPointServiceTest.NEVER_CALLED).convert(Mockito.any(PickupPointV1.class)) at Line: 499-500"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher,PickupPointServiceTest.NEVER_CALLED).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "501-503",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher,PickupPointServiceTest.NEVER_CALLED).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 501-503"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 689,
        "supermethodName": "delete_Valid_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class))",
            "lineNumber": "694",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointRepository).save(Mockito.any(PickupPointV1.class)) at Line: 694"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class))",
            "lineNumber": "695-697",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.kafkaPublisher).publish(Mockito.any(PickupPointKafka.class),Mockito.anyString(),Mockito.eq(PickupPointKafka.class)) at Line: 695-697"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString())",
            "lineNumber": "698-699",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.redisTemplate,PickupPointServiceTest.CALLED_TWICE).delete(Mockito.anyString()) at Line: 698-699"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class))",
            "lineNumber": "700-701",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointToPickupPointKafkaConverter).convert(Mockito.any(PickupPointV1.class)) at Line: 700-701"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/x/businesspartner/service/impl/ProfileServiceImplTest.java",
    "injectedMockScanResult": {
      "className": "ProfileServiceImpl",
      "classDeclaration": "profileService"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 296,
        "supermethodName": "findByBusinessPartnerName",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_BusinessPartnerNameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles)",
            "lineNumber": "302-304",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_BusinessPartnerNameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles) at Line: 302-304"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_BusinessPartnerNameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)",
            "lineNumber": "307-308",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_BusinessPartnerNameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable) at Line: 307-308"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 316,
        "supermethodName": "findByBusinessPartnerNameIgnoreCase",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_BusinessPartnerNameIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles)",
            "lineNumber": "321-323",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_BusinessPartnerNameIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles) at Line: 321-323"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_BusinessPartnerNameIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)",
            "lineNumber": "326-328",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_BusinessPartnerNameIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable) at Line: 326-328"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 337,
        "supermethodName": "findByBusinessPartnerNameContainingIgnoreCase",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles)",
            "lineNumber": "343-346",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles) at Line: 343-346"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)",
            "lineNumber": "350-352",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable) at Line: 350-352"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 380,
        "supermethodName": "findByBusinessPartnerTypeAndBusinessPartnerName",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles)",
            "lineNumber": "386-391",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles) at Line: 386-391"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,BUSINESSPARTNER_NAME,pageable)",
            "lineNumber": "395-398",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,BUSINESSPARTNER_NAME,pageable) at Line: 395-398"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 406,
        "supermethodName": "findByBusinessPartnerTypeAndBusinessPartnerNameAndCategoriesAndSalesLevel",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "416-422",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 416-422"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))",
            "lineNumber": "427-431",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class)) at Line: 427-431"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 439,
        "supermethodName": "findByBusinessPartnerTypeAndBusinessPartnerNameAndCategoriesAndSalesLevelEmptyType",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "449-455",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 449-455"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))",
            "lineNumber": "459-463",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class)) at Line: 459-463"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 471,
        "supermethodName": "findByBusinessPartnerTypeAndBusinessPartnerNameAndCategoriesAndSalesLevelNullFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "481-487",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 481-487"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class))",
            "lineNumber": "492-496",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),Mockito.anyList(),Matchers.any(Pageable.class)) at Line: 492-496"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 504,
        "supermethodName": "findByBusinessPartnerTypeAndCategoriesAndSalesLevel",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "516-522",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 516-522"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))",
            "lineNumber": "526-530",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class)) at Line: 526-530"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 538,
        "supermethodName": "findByBusinessPartnerTypeAndCategoriesAndSalesLevelEmptyType",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "550-556",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 550-556"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))",
            "lineNumber": "560-564",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class)) at Line: 560-564"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 572,
        "supermethodName": "findByBusinessPartnerTypeAndCategoriesAndSalesLevelNullFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "584-590",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 584-590"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))",
            "lineNumber": "594-598",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class)) at Line: 594-598"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 606,
        "supermethodName": "findByBusinessPartnerTypeAndCompanyNameAndBusinessPartnerNameAndCategoriesAndSalesLevel",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "619-625",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 619-625"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))",
            "lineNumber": "630-634",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class)) at Line: 630-634"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 642,
        "supermethodName": "findByBusinessPartnerTypeAndCompanyNameAndBusinessPartnerNameAndCategoriesAndSalesLevelEmptyType",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "655-661",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 655-661"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))",
            "lineNumber": "666-670",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class)) at Line: 666-670"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 678,
        "supermethodName": "findByBusinessPartnerTypeAndCompanyNameAndBusinessPartnerNameAndCategoriesAndSalesLevelNullFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles)",
            "lineNumber": "691-697",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))).thenReturn(profiles) at Line: 691-697"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class))",
            "lineNumber": "702-706",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyList(),Mockito.anyList(),(ProfileFilterDTO)Mockito.anyObject(),Matchers.any(Pageable.class)) at Line: 702-706"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 714,
        "supermethodName": "findByBusinessPartnerTypeAndMerchantFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,true,pageable)).thenReturn(profiles)",
            "lineNumber": "720-722",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,true,pageable)).thenReturn(profiles) at Line: 720-722"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,true,pageable)",
            "lineNumber": "726-728",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerTypeAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_TYPE,true,pageable) at Line: 726-728"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 736,
        "supermethodName": "findByCompanyName",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_NameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles)",
            "lineNumber": "742-744",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_NameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles) at Line: 742-744"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_NameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)",
            "lineNumber": "747-748",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_NameAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable) at Line: 747-748"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 757,
        "supermethodName": "findByCompanyNameContainingIgnoreCase",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_NameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles)",
            "lineNumber": "763-765",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_NameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)).thenReturn(profiles) at Line: 763-765"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_NameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable)",
            "lineNumber": "769-771",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_NameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESSPARTNER_NAME,pageable) at Line: 769-771"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 779,
        "supermethodName": "findByCompanyTypeOfBusiness",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_TypeOfBusinessAndMarkForDeleteFalse(STORE_ID,BUSINESS_TYPE,pageable)).thenReturn(profiles)",
            "lineNumber": "785-787",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_TypeOfBusinessAndMarkForDeleteFalse(STORE_ID,BUSINESS_TYPE,pageable)).thenReturn(profiles) at Line: 785-787"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_TypeOfBusinessAndMarkForDeleteFalse(STORE_ID,BUSINESS_TYPE,pageable)",
            "lineNumber": "790-791",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_TypeOfBusinessAndMarkForDeleteFalse(STORE_ID,BUSINESS_TYPE,pageable) at Line: 790-791"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 799,
        "supermethodName": "findByCustomerFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_CustomerFlagAndMarkForDeleteFalse(STORE_ID,true,pageable)).thenReturn(profiles)",
            "lineNumber": "805-807",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_CustomerFlagAndMarkForDeleteFalse(STORE_ID,true,pageable)).thenReturn(profiles) at Line: 805-807"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_CustomerFlagAndMarkForDeleteFalse(STORE_ID,true,pageable)",
            "lineNumber": "809-810",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_CustomerFlagAndMarkForDeleteFalse(STORE_ID,true,pageable) at Line: 809-810"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 829,
        "supermethodName": "findByInventoryFulfillment",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_InventoryFulfillmentAndMarkForDeleteFalse(STORE_ID,INVENTORY,pageable)).thenReturn(profiles)",
            "lineNumber": "835-837",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_InventoryFulfillmentAndMarkForDeleteFalse(STORE_ID,INVENTORY,pageable)).thenReturn(profiles) at Line: 835-837"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_InventoryFulfillmentAndMarkForDeleteFalse(STORE_ID,INVENTORY,pageable)",
            "lineNumber": "840-841",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_InventoryFulfillmentAndMarkForDeleteFalse(STORE_ID,INVENTORY,pageable) at Line: 840-841"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 849,
        "supermethodName": "findByMerchantFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,true,pageable)).thenReturn(profiles)",
            "lineNumber": "855-857",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,true,pageable)).thenReturn(profiles) at Line: 855-857"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,true,pageable)",
            "lineNumber": "859-860",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,true,pageable) at Line: 859-860"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 920,
        "supermethodName": "findByPurchaseTerm",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_PurchaseTermAndMarkForDeleteFalse(STORE_ID,PURCHASE,pageable)).thenReturn(profiles)",
            "lineNumber": "926-928",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_PurchaseTermAndMarkForDeleteFalse(STORE_ID,PURCHASE,pageable)).thenReturn(profiles) at Line: 926-928"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_PurchaseTermAndMarkForDeleteFalse(STORE_ID,PURCHASE,pageable)",
            "lineNumber": "930-931",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_PurchaseTermAndMarkForDeleteFalse(STORE_ID,PURCHASE,pageable) at Line: 930-931"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 956,
        "supermethodName": "findBySupplierFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCompany_SupplierFlagAndMarkForDeleteFalse(STORE_ID,false,pageable)).thenReturn(profiles)",
            "lineNumber": "962-964",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCompany_SupplierFlagAndMarkForDeleteFalse(STORE_ID,false,pageable)).thenReturn(profiles) at Line: 962-964"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndCompany_SupplierFlagAndMarkForDeleteFalse(STORE_ID,false,pageable)",
            "lineNumber": "966-967",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository).findByStoreIdAndCompany_SupplierFlagAndMarkForDeleteFalse(STORE_ID,false,pageable) at Line: 966-967"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1037,
        "supermethodName": "savePickupPointIdEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1054",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1054"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1055",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1055"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1058,
        "supermethodName": "savePickupPointIdNotEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1074",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1074"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1075",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1075"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1077",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1077"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1080,
        "supermethodName": "updatePreventUpdateCncActivated",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1104",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1104"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(pickupPointService).update(Matchers.any(PickupPoint.class))",
            "lineNumber": "1105",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(pickupPointService).update(Matchers.any(PickupPoint.class)) at Line: 1105"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1108,
        "supermethodName": "saveWithpurchaseTermAndinventoryFulfillmentNonMerchant",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1132",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1132"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1133",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1133"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1136,
        "supermethodName": "saveWithpurchaseTermAndinventoryFulfillmentAndMerchant",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1162",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1162"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1163",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1163"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1183,
        "supermethodName": "updatePickupPointIdEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1189-1191",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1189-1191"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publish(OperationType.INSERT,profile,Profile.class)",
            "lineNumber": "1194",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publish(OperationType.INSERT,profile,Profile.class) at Line: 1194"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1202",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1202"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1203",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1203"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1206,
        "supermethodName": "updatePickupPointIdNotEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1212-1214",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1212-1214"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publish(OperationType.INSERT,profile,Profile.class)",
            "lineNumber": "1217",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publish(OperationType.INSERT,profile,Profile.class) at Line: 1217"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())",
            "lineNumber": "1220-1221",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString()) at Line: 1220-1221"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1225",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1225"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1226",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1226"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1229,
        "supermethodName": "updateWithpurchaseTermAndinventoryFulfillmentIsEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1237-1239",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1237-1239"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(merchantService.findByPurchaseTermAndInventoryFulfillment(STORE_ID,PURCHASE,INVENTORY)).thenReturn(null)",
            "lineNumber": "1241-1243",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(merchantService.findByPurchaseTermAndInventoryFulfillment(STORE_ID,PURCHASE,INVENTORY)).thenReturn(null) at Line: 1241-1243"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1255",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1255"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1256",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1256"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1259,
        "supermethodName": "updateWithpurchaseTermIsEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1267-1269",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1267-1269"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(merchantService.findByPurchaseTermAndInventoryFulfillment(STORE_ID,PURCHASE,INVENTORY)).thenReturn(null)",
            "lineNumber": "1271-1273",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(merchantService.findByPurchaseTermAndInventoryFulfillment(STORE_ID,PURCHASE,INVENTORY)).thenReturn(null) at Line: 1271-1273"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1285",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1285"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1286",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1286"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1289,
        "supermethodName": "updateWithinventoryFulfillmentIsEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1297-1299",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1297-1299"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(merchantService.findByPurchaseTermAndInventoryFulfillment(STORE_ID,PURCHASE,INVENTORY)).thenReturn(null)",
            "lineNumber": "1301-1303",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(merchantService.findByPurchaseTermAndInventoryFulfillment(STORE_ID,PURCHASE,INVENTORY)).thenReturn(null) at Line: 1301-1303"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1315",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1315"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1316",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1316"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1319,
        "supermethodName": "updateWithpurchaseTermAndinventoryFulfillmentNonMerchant",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1327-1329",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1327-1329"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1345",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1345"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1346",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1346"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1383,
        "supermethodName": "updateWithpurchaseTermAndinventoryFulfillmentAndMerchant",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(PROFILE_ID)).thenReturn(profile)",
            "lineNumber": "1393",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(PROFILE_ID)).thenReturn(profile) at Line: 1393"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publish(OperationType.INSERT,profile,Profile.class)",
            "lineNumber": "1399",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publish(OperationType.INSERT,profile,Profile.class) at Line: 1399"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1400-1402",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1400-1402"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1412",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1412"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1413",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1413"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1416,
        "supermethodName": "updateWithExistingMerchantNotActive",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1427-1429",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1427-1429"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1445",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1445"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1446",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1446"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1449,
        "supermethodName": "updateWithExistingMerchantStatusNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1460-1462",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1460-1462"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1478",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1478"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1479",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1479"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1482,
        "supermethodName": "updateWithArchivedPickupPoint",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile)",
            "lineNumber": "1497-1499",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(Mockito.anyString(),Mockito.anyString())).thenReturn(profile) at Line: 1497-1499"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(pickupPointService).update(profile.getPickupPoints().get(0))",
            "lineNumber": "1500",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(pickupPointService).update(profile.getPickupPoints().get(0)) at Line: 1500"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1516",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileRedisTemplate).delete(anyString()) at Line: 1516"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1517",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1517"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1609,
        "supermethodName": "findMerchantNamesByBusinessPartnerCodeTest",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList())).thenReturn(profileList)",
            "lineNumber": "1613-1615",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList())).thenReturn(profileList) at Line: 1613-1615"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList())",
            "lineNumber": "1619-1621",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList()) at Line: 1619-1621"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1626,
        "supermethodName": "findMerchantNamesByBusinessPartnerCodeEmptyResponseTest",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList())).thenReturn(profileList)",
            "lineNumber": "1629-1631",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList())).thenReturn(profileList) at Line: 1629-1631"
          },
          {
            "methodCalledName": "findMerchantNamesByBusinessPartnerCodes",
            "methodCalledArguments": "merchantDtoList=profileService.findMerchantNamesByBusinessPartnerCodes(STORE_ID,businessPartnerCodes)",
            "lineNumber": "1633-1634",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: merchantDtoList=profileService.findMerchantNamesByBusinessPartnerCodes(STORE_ID,businessPartnerCodes) at Line 1633-1634"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList())",
            "lineNumber": "1635-1637",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(repository).findByStoreIdAndBusinessPartnerCodeInAndMarkForDeleteFalse(Mockito.eq(STORE_ID),anyList()) at Line: 1635-1637"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1714,
        "supermethodName": "testEvictAllProfilesFromCache_null",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.profileRedisTemplate.keys(Mockito.anyString())).thenReturn(null)",
            "lineNumber": "1716",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.profileRedisTemplate.keys(Mockito.anyString())).thenReturn(null) at Line: 1716"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.profileRedisTemplate).keys(Mockito.anyString())",
            "lineNumber": "1718",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.profileRedisTemplate).keys(Mockito.anyString()) at Line: 1718"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1721,
        "supermethodName": "testEvictAllProfilesFromCache_empty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.profileRedisTemplate.keys(Mockito.anyString())).thenReturn(businessPartnerProfileKeys)",
            "lineNumber": "1724",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.profileRedisTemplate.keys(Mockito.anyString())).thenReturn(businessPartnerProfileKeys) at Line: 1724"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.profileRedisTemplate).keys(Mockito.anyString())",
            "lineNumber": "1726",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.profileRedisTemplate).keys(Mockito.anyString()) at Line: 1726"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1729,
        "supermethodName": "testEvictAllProfilesFromCache",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.profileRedisTemplate.keys(Mockito.anyString())).thenReturn(businessPartnerProfileKeys)",
            "lineNumber": "1733",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.profileRedisTemplate.keys(Mockito.anyString())).thenReturn(businessPartnerProfileKeys) at Line: 1733"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.profileRedisTemplate).keys(Mockito.anyString())",
            "lineNumber": "1735",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.profileRedisTemplate).keys(Mockito.anyString()) at Line: 1735"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.profileRedisTemplate).delete(Mockito.anySet())",
            "lineNumber": "1736",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.profileRedisTemplate).delete(Mockito.anySet()) at Line: 1736"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1739,
        "supermethodName": "updateResignMerchant_Success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.repository.save(Mockito.any(Profile.class))).thenReturn(profile)",
            "lineNumber": "1745",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(this.repository.save(Mockito.any(Profile.class))).thenReturn(profile) at Line: 1745"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1753",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1753"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1758,
        "supermethodName": "updateCncActivated_SuccessWithCncActivatedTrueInRequestParameter",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class))",
            "lineNumber": "1773-1774",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class)) at Line: 1773-1774"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1778,
        "supermethodName": "updateCncActivated_SuccessWithCncActivatedFalseInRequestParameter",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.pickupPointService).update(Mockito.any(PickupPoint.class))",
            "lineNumber": "1789",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.pickupPointService).update(Mockito.any(PickupPoint.class)) at Line: 1789"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class))",
            "lineNumber": "1794-1795",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class)) at Line: 1794-1795"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1814,
        "supermethodName": "updateCncActivated_emptyPickupPointListInMerchant",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class))",
            "lineNumber": "1830-1831",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class)) at Line: 1830-1831"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1835,
        "supermethodName": "updateCncActivated_nullPickupPointListInMerchant",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class))",
            "lineNumber": "1851-1852",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(this.domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(Profile.class),Mockito.any(Profile.class)) at Line: 1851-1852"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/x/businesspartner/service/impl/BusinessPartnerDomainEventPublisherServiceImplTest.java",
    "injectedMockScanResult": {
      "className": "BusinessPartnerDomainEventPublisherServiceImpl",
      "classDeclaration": "service"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 44,
        "supermethodName": "testPublishAddEvent",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToBusinessPartnerAdd(Mockito.any(Profile.class))",
            "lineNumber": "47-48",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToBusinessPartnerAdd(Mockito.any(Profile.class)) at Line: 47-48"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerAdd.class),Mockito.eq(BusinessPartnerDomainEventName.ADD),Mockito.eq(BusinessPartnerAdd.class))",
            "lineNumber": "49-50",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerAdd.class),Mockito.eq(BusinessPartnerDomainEventName.ADD),Mockito.eq(BusinessPartnerAdd.class)) at Line: 49-50"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 53,
        "supermethodName": "testPublishUpdateAllEvent",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToBusinessPartnerChangeEventModel(Mockito.any(Profile.class),(Set<CompanyChangeFields>)Mockito.anySet())",
            "lineNumber": "56-57",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToBusinessPartnerChangeEventModel(Mockito.any(Profile.class),(Set<CompanyChangeFields>)Mockito.anySet()) at Line: 56-57"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerChange.class),Mockito.eq(BusinessPartnerDomainEventName.UPDATE_ALL),Mockito.eq(BusinessPartnerChange.class))",
            "lineNumber": "58-60",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerChange.class),Mockito.eq(BusinessPartnerDomainEventName.UPDATE_ALL),Mockito.eq(BusinessPartnerChange.class)) at Line: 58-60"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 127,
        "supermethodName": "testPublishFieldsChangedEvent_CncActivatedFieldChanged",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToBusinessPartnerChangeEventModel(Mockito.any(Profile.class),(Set<CompanyChangeFields>)Mockito.anySet())",
            "lineNumber": "140-141",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToBusinessPartnerChangeEventModel(Mockito.any(Profile.class),(Set<CompanyChangeFields>)Mockito.anySet()) at Line: 140-141"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerChange.class),Mockito.eq(BusinessPartnerDomainEventName.UPDATE_FIELDS),Mockito.eq(BusinessPartnerChange.class))",
            "lineNumber": "142-144",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerChange.class),Mockito.eq(BusinessPartnerDomainEventName.UPDATE_FIELDS),Mockito.eq(BusinessPartnerChange.class)) at Line: 142-144"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/x/businesspartner/service/impl/PickupPointDomainEventPublisherServiceImplTest.java",
    "injectedMockScanResult": {
      "className": "PickupPointDomainEventPublisherServiceImpl",
      "classDeclaration": "service"
    },
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 78,
        "supermethodName": "testPublishAllChangedEvent",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet())",
            "lineNumber": "96-97",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet()) at Line: 96-97"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_ALL),Mockito.eq(PickupPointChange.class))",
            "lineNumber": "98-99",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_ALL),Mockito.eq(PickupPointChange.class)) at Line: 98-99"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 194,
        "supermethodName": "testPublishFieldsChangedEvent_AllFieldsChanged",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet())",
            "lineNumber": "235-236",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet()) at Line: 235-236"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class))",
            "lineNumber": "237-238",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class)) at Line: 237-238"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 241,
        "supermethodName": "testPublishFieldsChangedEvent_AllFieldsChangedWithNullValue",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet())",
            "lineNumber": "282-283",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet()) at Line: 282-283"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class))",
            "lineNumber": "284-285",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class)) at Line: 284-285"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 288,
        "supermethodName": "testPublishFieldsChangedEvent_SomeFieldsChangedToEmpty",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet())",
            "lineNumber": "329-330",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet()) at Line: 329-330"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class))",
            "lineNumber": "331-332",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class)) at Line: 331-332"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 335,
        "supermethodName": "testPublishFieldsChangedEvent_GeolocationFieldChangedToNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet())",
            "lineNumber": "370-371",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet()) at Line: 370-371"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class))",
            "lineNumber": "372-373",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class)) at Line: 372-373"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 376,
        "supermethodName": "testPublishFieldsChangedEvent_AddNewGeolocationField",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet())",
            "lineNumber": "411-412",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToPickupPointChangeEventModel(Mockito.any(PickupPoint.class),(Set<PickupPointChangeFields>)Mockito.anySet()) at Line: 411-412"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class))",
            "lineNumber": "413-414",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(PickupPointChange.class),Mockito.eq(PickupPointDomainEventName.UPDATE_FIELDS),Mockito.eq(PickupPointChange.class)) at Line: 413-414"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 426,
        "supermethodName": "testPublishPickupPointAddEvent",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventModelConverter).convertToPickupPointAddEventModel(Mockito.eq(BP_CODE),Mockito.anyList())",
            "lineNumber": "447-448",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventModelConverter).convertToPickupPointAddEventModel(Mockito.eq(BP_CODE),Mockito.anyList()) at Line: 447-448"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerAddPickupPoint.class),Mockito.eq(PickupPointDomainEventName.ADD),Mockito.eq(BusinessPartnerAddPickupPoint.class))",
            "lineNumber": "449-452",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisher).publish(Mockito.any(BusinessPartnerAddPickupPoint.class),Mockito.eq(PickupPointDomainEventName.ADD),Mockito.eq(BusinessPartnerAddPickupPoint.class)) at Line: 449-452"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/x/businesspartner/service/PickupPointServiceTest.java",
    "injectedMockScanResult": {
      "className": "PickupPointServiceImpl",
      "classDeclaration": "service"
    },
    "mockScanResultList": [
      {
        "mockName": "profileRepository",
        "lineNumber": "91-92",
        "errorMessage": "Couldn't Find Matching VerifyNoMoreInteractions Method for : profileRepository at Line: 91-92"
      }
    ],
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 166,
        "supermethodName": "test_Update",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileService.isBusinessPartnerCncActivated(PickupPointServiceTest.BP_CODE)).thenReturn(true)",
            "lineNumber": "169-170",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileService.isBusinessPartnerCncActivated(PickupPointServiceTest.BP_CODE)).thenReturn(true) at Line: 169-170"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "171",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint()) at Line: 171"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "172-174",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 172-174"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "184",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 184"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class))",
            "lineNumber": "185-186",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class)) at Line: 185-186"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class))",
            "lineNumber": "187-188",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class)) at Line: 187-188"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 191,
        "supermethodName": "test_UpdateWithNonCncMerchant",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileService.isBusinessPartnerCncActivated(PickupPointServiceTest.BP_CODE)).thenReturn(false)",
            "lineNumber": "196-197",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileService.isBusinessPartnerCncActivated(PickupPointServiceTest.BP_CODE)).thenReturn(false) at Line: 196-197"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "198",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint()) at Line: 198"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "199-200",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 199-200"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "210",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 210"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class))",
            "lineNumber": "211-212",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class)) at Line: 211-212"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class))",
            "lineNumber": "213-214",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class)) at Line: 213-214"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 217,
        "supermethodName": "test_UpdateWithNoPickupPoint",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(null)",
            "lineNumber": "219",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(null) at Line: 219"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "221-223",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 221-223"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "228",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 228"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 243,
        "supermethodName": "testDelete",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(pp)",
            "lineNumber": "247",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(pp) at Line: 247"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "248-250",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 248-250"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findOne(DEFAULT_ID)).thenReturn(page.getContent().get(0))",
            "lineNumber": "251",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findOne(DEFAULT_ID)).thenReturn(page.getContent().get(0)) at Line: 251"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileService).evictProfileFromCache(Mockito.anyString(),Mockito.anyString())",
            "lineNumber": "260",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileService).evictProfileFromCache(Mockito.anyString(),Mockito.anyString()) at Line: 260"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 263,
        "supermethodName": "testDelete_Failed",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(null)",
            "lineNumber": "266",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(null) at Line: 266"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "267-269",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 267-269"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findOne(DEFAULT_ID)).thenReturn(page.getContent().get(0))",
            "lineNumber": "270",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findOne(DEFAULT_ID)).thenReturn(page.getContent().get(0)) at Line: 270"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 282,
        "supermethodName": "testDelete_WithNoProfile",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "285",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint()) at Line: 285"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "286-288",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 286-288"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(publisher,AT_LEAST_NONE).publish(Mockito.any(OperationType.class),Mockito.any(Profile.class),Mockito.any(Class.class))",
            "lineNumber": "297-298",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(publisher,AT_LEAST_NONE).publish(Mockito.any(OperationType.class),Mockito.any(Profile.class),Mockito.any(Class.class)) at Line: 297-298"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 302,
        "supermethodName": "testFindByCode",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndCode(STORE_ID,DEFAULT_PICKUP_POINT_CODE)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "304-305",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndCode(STORE_ID,DEFAULT_PICKUP_POINT_CODE)).thenReturn(getDefaultPickupPoint()) at Line: 304-305"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 328,
        "supermethodName": "testFindById",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "330",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint()) at Line: 330"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 335,
        "supermethodName": "testFindByStoreId",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreId(STORE_ID,page)).thenReturn(getDefaultPickupPointPage())",
            "lineNumber": "338",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreId(STORE_ID,page)).thenReturn(getDefaultPickupPointPage()) at Line: 338"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 343,
        "supermethodName": "testPublish_WithNotFoundProfile",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "346-348",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 346-348"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(publisher,AT_LEAST_NONE).publish(Mockito.any(OperationType.class),Mockito.any(Profile.class),Mockito.any(Class.class))",
            "lineNumber": "354-355",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(publisher,AT_LEAST_NONE).publish(Mockito.any(OperationType.class),Mockito.any(Profile.class),Mockito.any(Class.class)) at Line: 354-355"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 363,
        "supermethodName": "testSave_IdNotNullExistsAndCodeNotNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(pickupPoint)",
            "lineNumber": "367",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(pickupPoint) at Line: 367"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "369-371",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 369-371"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "375",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 375"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(mockPP,AT_LEAST_NONE).setCode(Mockito.anyString())",
            "lineNumber": "377",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(mockPP,AT_LEAST_NONE).setCode(Mockito.anyString()) at Line: 377"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 384,
        "supermethodName": "testSave_IdNotNullNotExistsAndCodeNotNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(pickupPoint.getId())).thenReturn(null)",
            "lineNumber": "387",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(pickupPoint.getId())).thenReturn(null) at Line: 387"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.save(pickupPoint)).thenReturn(pickupPoint)",
            "lineNumber": "388",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.save(pickupPoint)).thenReturn(pickupPoint) at Line: 388"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "390-392",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 390-392"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findOne(DEFAULT_ID)).thenReturn(page.getContent().get(0))",
            "lineNumber": "393",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findOne(DEFAULT_ID)).thenReturn(page.getContent().get(0)) at Line: 393"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "397",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 397"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 400,
        "supermethodName": "testSave_IdNullCodeNotNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.save(pickupPoint)).thenReturn(pickupPoint)",
            "lineNumber": "405",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.save(pickupPoint)).thenReturn(pickupPoint) at Line: 405"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "407-409",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 407-409"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(mockPP,AT_LEAST_NONE).setCode(Mockito.anyString())",
            "lineNumber": "412",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(mockPP,AT_LEAST_NONE).setCode(Mockito.anyString()) at Line: 412"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "414",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 414"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 417,
        "supermethodName": "testSave_IdNullCodeNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.save(pickupPoint)).thenReturn(pickupPoint)",
            "lineNumber": "426",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.save(pickupPoint)).thenReturn(pickupPoint) at Line: 426"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(counterService.getSequence(Mockito.anyString(),Mockito.anyString())).thenReturn(pickupPointCodeNumber)",
            "lineNumber": "427-428",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(counterService.getSequence(Mockito.anyString(),Mockito.anyString())).thenReturn(pickupPointCodeNumber) at Line: 427-428"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(pickupPoint.getStoreId(),pickupPointCode,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "430-432",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(pickupPoint.getStoreId(),pickupPointCode,newPageRequest(0,1))).thenReturn(page) at Line: 430-432"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(counterService,AT_LEAST_ONE).getSequence(Mockito.anyString(),Mockito.anyString())",
            "lineNumber": "435-436",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(counterService,AT_LEAST_ONE).getSequence(Mockito.anyString(),Mockito.anyString()) at Line: 435-436"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "438",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 438"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 456,
        "supermethodName": "testAddBusinessPartnerPickupPoint_EmptyPickupPoints",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator,Mockito.times(addPickupPoints.size())).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "468-469",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator,Mockito.times(addPickupPoints.size())).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 468-469"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(counterService,Mockito.times(addPickupPoints.size())).getSequence(Mockito.anyString(),Mockito.anyString())",
            "lineNumber": "470-471",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(counterService,Mockito.times(addPickupPoints.size())).getSequence(Mockito.anyString(),Mockito.anyString()) at Line: 470-471"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).save(Mockito.anyList())",
            "lineNumber": "472",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(repository).save(Mockito.anyList()) at Line: 472"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.anyString(),Mockito.anyList())",
            "lineNumber": "476-477",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.anyString(),Mockito.anyList()) at Line: 476-477"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileService).evictProfileFromCache(Mockito.anyString(),Mockito.anyString())",
            "lineNumber": "478",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileService).evictProfileFromCache(Mockito.anyString(),Mockito.anyString()) at Line: 478"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 483,
        "supermethodName": "testAddBusinessPartnerPickupPoint_AddToExistingPickupPoints",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator,Mockito.times(addPickupPoints.size())).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "496-497",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator,Mockito.times(addPickupPoints.size())).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 496-497"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(counterService,Mockito.times(addPickupPoints.size())).getSequence(Mockito.anyString(),Mockito.anyString())",
            "lineNumber": "498-499",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(counterService,Mockito.times(addPickupPoints.size())).getSequence(Mockito.anyString(),Mockito.anyString()) at Line: 498-499"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).save(Mockito.anyList())",
            "lineNumber": "500",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(repository).save(Mockito.anyList()) at Line: 500"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(profileService).evictProfileFromCache(Mockito.anyString(),Mockito.anyString())",
            "lineNumber": "503",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(profileService).evictProfileFromCache(Mockito.anyString(),Mockito.anyString()) at Line: 503"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.anyString(),Mockito.anyList())",
            "lineNumber": "505-506",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishAddEvent(Mockito.anyString(),Mockito.anyList()) at Line: 505-506"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 511,
        "supermethodName": "testInActiveByBusinessPartnerCode",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "515-517",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 515-517"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.save(Mockito.any(PickupPoint.class))).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "522",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.when(repository.save(Mockito.any(PickupPoint.class))).thenReturn(getDefaultPickupPoint()) at Line: 522"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository).save(Mockito.any(PickupPoint.class))",
            "lineNumber": "526",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(repository).save(Mockito.any(PickupPoint.class)) at Line: 526"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class))",
            "lineNumber": "529-530",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class)) at Line: 529-530"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class))",
            "lineNumber": "531-532",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class)) at Line: 531-532"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 538,
        "supermethodName": "testGetProfileFromStoreIdAndPickupPointCode",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "541",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(DEFAULT_ID)).thenReturn(getDefaultPickupPoint()) at Line: 541"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "542-544",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(STORE_ID,DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 542-544"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 550,
        "supermethodName": "testFindListByExternalCodes",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.repository.findByStoreIdAndBusinessPartnerCodeAndExternalPickupPointCodeInAndActivatedTrueAndArchivedFalse(STORE_ID,BP_CODE,requests)).thenReturn(response)",
            "lineNumber": "559-560",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(this.repository.findByStoreIdAndBusinessPartnerCodeAndExternalPickupPointCodeInAndActivatedTrueAndArchivedFalse(STORE_ID,BP_CODE,requests)).thenReturn(response) at Line: 559-560"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 570,
        "supermethodName": "findByBusinessPartnerCodeAndPickupPointCode_valid_success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeAndCode(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.BP_CODE,PickupPointServiceTest.DEFAULT_PICKUP_POINT_CODE)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "572-575",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeAndCode(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.BP_CODE,PickupPointServiceTest.DEFAULT_PICKUP_POINT_CODE)).thenReturn(getDefaultPickupPoint()) at Line: 572-575"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 669,
        "supermethodName": "calculateInstantPickupDeadlines_valid_success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileService.findByBusinessPartnerCode(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.BP_CODE)).thenReturn(profile)",
            "lineNumber": "684-686",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileService.findByBusinessPartnerCode(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.BP_CODE)).thenReturn(profile) at Line: 684-686"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeAndCode(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.BP_CODE,PickupPointServiceTest.DEFAULT_PICKUP_POINT_CODE)).thenReturn(pickupPoint)",
            "lineNumber": "687-690",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCodeAndCode(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.BP_CODE,PickupPointServiceTest.DEFAULT_PICKUP_POINT_CODE)).thenReturn(pickupPoint) at Line: 687-690"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 702,
        "supermethodName": "generateInstantPickupDeadlineByStartDateAndBusinessHour_valid_success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "generateInstantPickupDeadline",
            "methodCalledArguments": "dateActual=service.generateInstantPickupDeadline(getDefaultBusinessHourVos(),date.getMillis(),DEFAULT_INSTANT_PICKUP_DEADLINE_IN_DAYS)",
            "lineNumber": "708-709",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: dateActual=service.generateInstantPickupDeadline(getDefaultBusinessHourVos(),date.getMillis(),DEFAULT_INSTANT_PICKUP_DEADLINE_IN_DAYS) at Line 708-709"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 796,
        "supermethodName": "updateCncActivatedByBusinessPartnerCodeAndPickupPointCode_valid_success",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileService.isBusinessPartnerCncActivated(PickupPointServiceTest.BP_CODE)).thenReturn(true)",
            "lineNumber": "801-802",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileService.isBusinessPartnerCncActivated(PickupPointServiceTest.BP_CODE)).thenReturn(true) at Line: 801-802"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findOne(PickupPointServiceTest.DEFAULT_ID)).thenReturn(getDefaultPickupPoint())",
            "lineNumber": "803-804",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findOne(PickupPointServiceTest.DEFAULT_ID)).thenReturn(getDefaultPickupPoint()) at Line: 803-804"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page)",
            "lineNumber": "805-808",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(profileRepository.findByStoreIdAndPickupPoints_Code(PickupPointServiceTest.STORE_ID,PickupPointServiceTest.DEFAULT_PICKUP_POINT_CODE,newPageRequest(0,1))).thenReturn(page) at Line: 805-808"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class))",
            "lineNumber": "830",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(validator).validateMandatoryFields(Mockito.any(PickupPoint.class)) at Line: 830"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class))",
            "lineNumber": "831-832",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(PickupPoint.class)) at Line: 831-832"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class))",
            "lineNumber": "833-834",
            "errorMessage": "Please Consider to not Use any() as an Argument for : Mockito.verify(domainEventPublisherService).publishUpdateFieldsEvent(Mockito.any(PickupPoint.class),Mockito.any(PickupPoint.class)) at Line: 833-834"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 838,
        "supermethodName": "findByBusinessPartnerCodeAndPickupPointCodes_success_valid",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(this.repository.findByStoreIdAndBusinessPartnerCodeAndCodeInAndActivatedTrueAndCncActivatedTrue(STORE_ID,BP_CODE,requests)).thenReturn(response)",
            "lineNumber": "847-848",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(this.repository.findByStoreIdAndBusinessPartnerCodeAndCodeInAndActivatedTrueAndCncActivatedTrue(STORE_ID,BP_CODE,requests)).thenReturn(response) at Line: 847-848"
          }
        ]
      }
    ]
  },
  {
    "pathClass": "/Users/adewijanugraha/Google Drive/SKRIPSI/Produk/unit-test-scanner/ext-resources/projectDirectories/business-partner-service-impl-uploadedAt-2019-04-08 19:56:18.836/business-partner-service-impl/src/test/java/com/gdn/x/businesspartner/service/ProfileServiceTest.java",
    "injectedMockScanResult": {
      "className": "ProfileServiceImpl",
      "classDeclaration": "profileService"
    },
    "mockScanResultList": [
      {
        "mockName": "pickupPointService",
        "lineNumber": "123-124",
        "errorMessage": "Couldn't Find Matching VerifyNoMoreInteractions Method for : pickupPointService at Line: 123-124"
      }
    ],
    "annotationScanResultList": [
      {
        "annotationName": "Test",
        "lineNumber": 371,
        "supermethodName": "testDeletingProfile",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "375-376",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 375-376"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "when(repository.findOne(id)).thenReturn(profile)",
            "lineNumber": "378",
            "errorMessage": "Couldn't Find Matching Verify Method for : when(repository.findOne(id)).thenReturn(profile) at Line: 378"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback)",
            "lineNumber": "379-383",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback) at Line: 379-383"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 455,
        "supermethodName": "testFindBusinessPartnerTypeAndBusinessPartnerName",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "Mockito.verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESS_PARTNER_TYPE,DEFAULT_BUSINESS_PARTNER_NAME,pageable)",
            "lineNumber": "463-466",
            "errorMessage": "Couldn't Find Matching Void Test Method for : Mockito.verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,BUSINESS_PARTNER_TYPE,DEFAULT_BUSINESS_PARTNER_NAME,pageable) at Line: 463-466"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 516,
        "supermethodName": "testFindBusinessPartnerTypeAndMerchantFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,BUSINESS_PARTNER_TYPE,DEFAULT_MERCHANT_FLAG,pageable)",
            "lineNumber": "523-525",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,BUSINESS_PARTNER_TYPE,DEFAULT_MERCHANT_FLAG,pageable) at Line: 523-525"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 609,
        "supermethodName": "testFindByBusinessPartnerName",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_BusinessPartnerNameAndMarkForDeleteFalse(STORE_ID,DEFAULT_BUSINESS_PARTNER_NAME,pageable)",
            "lineNumber": "615-617",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_BusinessPartnerNameAndMarkForDeleteFalse(STORE_ID,DEFAULT_BUSINESS_PARTNER_NAME,pageable) at Line: 615-617"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 620,
        "supermethodName": "testFindByBusinessPartnerNameContainingIgnoreCase",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,DEFAULT_BUSINESS_PARTNER_NAME_SEARCH,pageable)",
            "lineNumber": "627-629",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_BusinessPartnerNameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,DEFAULT_BUSINESS_PARTNER_NAME_SEARCH,pageable) at Line: 627-629"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 632,
        "supermethodName": "testFindByBusinessPartnerTypeAndBusinessPartnerNameAndCategoriesAndSalesLevelWithBusinessPartnerTypeNotNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,DEFAULT_BUSINESS_PARTNER_NAME,categoryList,salesLevelList,merchantFlags,pageable)",
            "lineNumber": "641-644",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,DEFAULT_BUSINESS_PARTNER_NAME,categoryList,salesLevelList,merchantFlags,pageable) at Line: 641-644"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 647,
        "supermethodName": "testFindByBusinessPartnerTypeAndBusinessPartnerNameAndCategoriesAndSalesLevelWithBusinessPartnerTypeNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,DEFAULT_BUSINESS_PARTNER_NAME,categoryList,salesLevelList,merchantFlags,pageable)",
            "lineNumber": "657-660",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,DEFAULT_BUSINESS_PARTNER_NAME,categoryList,salesLevelList,merchantFlags,pageable) at Line: 657-660"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 663,
        "supermethodName": "testFindByBusinessPartnerTypeAndCategoriesAndSalesLevelWithBusinessPartnerTypeNotNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable)",
            "lineNumber": "674-676",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable) at Line: 674-676"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 679,
        "supermethodName": "testFindByBusinessPartnerTypeAndCategoriesAndSalesLevelWithBusinessPartnerTypeNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable)",
            "lineNumber": "691-693",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable) at Line: 691-693"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 696,
        "supermethodName": "testFindByBusinessPartnerTypeAndCompanyNameAndBusinessPartnerNameAndCategoriesAndSalesLevel",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable)).thenReturn(page)",
            "lineNumber": "708-712",
            "errorMessage": "Couldn't Find Matching Verify Method for : when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable)).thenReturn(page) at Line: 708-712"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable)",
            "lineNumber": "719-721",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable) at Line: 719-721"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 724,
        "supermethodName": "testFindByBusinessPartnerTypeAndCompanyNameAndBusinessPartnerNameAndCategoriesAndSalesLevelWithBusinessPartnerTypeNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyListOf(String.class),Mockito.anyListOf(Boolean.class),(ProfileFilterDTO)Mockito.anyObject(),Mockito.any(Pageable.class))).thenReturn(page)",
            "lineNumber": "737-742",
            "errorMessage": "Couldn't Find Matching Verify Method for : when(repository.findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(Mockito.anyString(),Mockito.anyListOf(String.class),Mockito.anyListOf(Boolean.class),(ProfileFilterDTO)Mockito.anyObject(),Mockito.any(Pageable.class))).thenReturn(page) at Line: 737-742"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable)",
            "lineNumber": "749-751",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndBusinessPartnerTypeAndCompany_NameAndCompany_BusinessPartnerNameAndCategoriesInAndCompany_SalesLevelInAndMarkForDeleteFalse(STORE_ID,businessPartnerTypes,merchantFlags,profileFilterDTO,pageable) at Line: 749-751"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 755,
        "supermethodName": "testFindByCompanyName",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_NameAndMarkForDeleteFalse(STORE_ID,DEFAULT_NAME,pageable)",
            "lineNumber": "761-762",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_NameAndMarkForDeleteFalse(STORE_ID,DEFAULT_NAME,pageable) at Line: 761-762"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 765,
        "supermethodName": "testFindByCompanyNameContainingIgnoreCase",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_NameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,DEFAULT_NAME_SEARCH,pageable)",
            "lineNumber": "771-773",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_NameContainingIgnoreCaseAndMarkForDeleteFalse(STORE_ID,DEFAULT_NAME_SEARCH,pageable) at Line: 771-773"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 776,
        "supermethodName": "testFindByCustomerFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_CustomerFlagAndMarkForDeleteFalse(STORE_ID,DEFAULT_CUSTOMER_FLAG,pageable)",
            "lineNumber": "782-783",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_CustomerFlagAndMarkForDeleteFalse(STORE_ID,DEFAULT_CUSTOMER_FLAG,pageable) at Line: 782-783"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 786,
        "supermethodName": "testFindById",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "when",
            "methodCalledArguments": "when(repository.findOne(id)).thenReturn(profile)",
            "lineNumber": "790",
            "errorMessage": "Couldn't Find Matching Verify Method for : when(repository.findOne(id)).thenReturn(profile) at Line: 790"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 796,
        "supermethodName": "testFindByInventoryFulfillment",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_InventoryFulfillmentAndMarkForDeleteFalse(STORE_ID,DEFAULT_INVENTORY_FULFILLMENT,pageable)",
            "lineNumber": "802-804",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_InventoryFulfillmentAndMarkForDeleteFalse(STORE_ID,DEFAULT_INVENTORY_FULFILLMENT,pageable) at Line: 802-804"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 807,
        "supermethodName": "testFindByMerchantFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,DEFAULT_MERCHANT_FLAG,pageable)",
            "lineNumber": "813-814",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_MerchantFlagAndMarkForDeleteFalse(STORE_ID,DEFAULT_MERCHANT_FLAG,pageable) at Line: 813-814"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 847,
        "supermethodName": "testFindByPurchaseTerm",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_PurchaseTermAndMarkForDeleteFalse(STORE_ID,DEFAULT_PURCHASE_TERM,pageable)",
            "lineNumber": "853-854",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_PurchaseTermAndMarkForDeleteFalse(STORE_ID,DEFAULT_PURCHASE_TERM,pageable) at Line: 853-854"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 866,
        "supermethodName": "testFindBySupplierFlag",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_SupplierFlagAndMarkForDeleteFalse(STORE_ID,DEFAULT_SUPPLIER_FLAG,pageable)",
            "lineNumber": "872-873",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_SupplierFlagAndMarkForDeleteFalse(STORE_ID,DEFAULT_SUPPLIER_FLAG,pageable) at Line: 872-873"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 896,
        "supermethodName": "testFindByTypeOfBusiness",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_TypeOfBusinessAndMarkForDeleteFalse(STORE_ID,DEFAULT_TYPE_OF_BUSINESS,pageable)",
            "lineNumber": "902-903",
            "errorMessage": "Couldn't Find Matching Void Test Method for : verify(repository,AT_LEAST_ONE).findByStoreIdAndCompany_TypeOfBusinessAndMarkForDeleteFalse(STORE_ID,DEFAULT_TYPE_OF_BUSINESS,pageable) at Line: 902-903"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 936,
        "supermethodName": "testSavingProfile",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.INSERT)",
            "lineNumber": "938-939",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.INSERT) at Line 938-939"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback)",
            "lineNumber": "940-944",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback) at Line: 940-944"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "951",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 951"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "952",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 952"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 956,
        "supermethodName": "testSavingProfile2",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "960-961",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 960-961"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback)",
            "lineNumber": "962-966",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback) at Line: 962-966"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "975",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 975"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "976",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 976"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 980,
        "supermethodName": "testSavingProfileWithExistsPickupPoint",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "986-987",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 986-987"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback)",
            "lineNumber": "988-992",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback) at Line: 988-992"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1003",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 1003"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1004",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1004"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1007,
        "supermethodName": "testSavingProfileWithInventoryFulfillmentNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "1012-1013",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 1012-1013"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback)",
            "lineNumber": "1014-1018",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback) at Line: 1014-1018"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1027",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 1027"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1028",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1028"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1032,
        "supermethodName": "testSavingProfileWithNoPickupPoint",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "1037-1038",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 1037-1038"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback)",
            "lineNumber": "1039-1043",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback) at Line: 1039-1043"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1054",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 1054"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1055",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1055"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1059,
        "supermethodName": "testSavingProfileWithPurchaseTermNull",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "1064-1065",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 1064-1065"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback)",
            "lineNumber": "1066-1070",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.INSERT,profile,Profile.class,callback) at Line: 1066-1070"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1079",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 1079"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class))",
            "lineNumber": "1080",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishAddEvent(Mockito.any(Profile.class)) at Line: 1080"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1293,
        "supermethodName": "testUpdateProfile",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "1297-1298",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 1297-1298"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(STORE_ID,BUSINESS_PARTNER_CODE)).thenReturn(profile)",
            "lineNumber": "1299-1301",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(STORE_ID,BUSINESS_PARTNER_CODE)).thenReturn(profile) at Line: 1299-1301"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback)",
            "lineNumber": "1302-1306",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback) at Line: 1302-1306"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1318",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 1318"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1319",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1319"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1322,
        "supermethodName": "testUpdateProfileWithExistsPickupPoint",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "1327-1328",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 1327-1328"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(STORE_ID,BUSINESS_PARTNER_CODE)).thenReturn(profile)",
            "lineNumber": "1329-1331",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(STORE_ID,BUSINESS_PARTNER_CODE)).thenReturn(profile) at Line: 1329-1331"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback)",
            "lineNumber": "1332-1336",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback) at Line: 1332-1336"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1348",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 1348"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1349",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1349"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1353,
        "supermethodName": "testUpdateProfileWithNoPickupPoint",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "1358-1359",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 1358-1359"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(STORE_ID,BUSINESS_PARTNER_CODE)).thenReturn(profile)",
            "lineNumber": "1360-1362",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.when(repository.findByStoreIdAndBusinessPartnerCode(STORE_ID,BUSINESS_PARTNER_CODE)).thenReturn(profile) at Line: 1360-1362"
          },
          {
            "methodCalledName": "when",
            "methodCalledArguments": "Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback)",
            "lineNumber": "1363-1367",
            "errorMessage": "Couldn't Find Matching Verify Method for : Mockito.doNothing().when(publisher).publishNotification(EXCHANGE_NAME,ROUTING_KEY,OperationType.UPDATE,profile,Profile.class,callback) at Line: 1363-1367"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(profileRedisTemplate).delete(anyString())",
            "lineNumber": "1379",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(profileRedisTemplate).delete(anyString()) at Line: 1379"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class))",
            "lineNumber": "1380",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(domainEventPublisherService).publishUpdateAllEvent(Mockito.any(Profile.class)) at Line: 1380"
          }
        ]
      },
      {
        "annotationName": "Test",
        "lineNumber": 1424,
        "supermethodName": "testResign",
        "calledMethodScanResultList": [
          {
            "methodCalledName": "getNullNotificationCallback",
            "methodCalledArguments": "callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE)",
            "lineNumber": "1427-1428",
            "errorMessage": "Couldn't Find Matching Assert Method from Test Class for Variable: callback=businessPartnerNotificationPublisher.getNullNotificationCallback(OperationType.UPDATE) at Line 1427-1428"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(this.repository,AT_LEAST_ONE).save(Mockito.any(Profile.class))",
            "lineNumber": "1433",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(this.repository,AT_LEAST_ONE).save(Mockito.any(Profile.class)) at Line: 1433"
          },
          {
            "methodCalledName": "verify",
            "methodCalledArguments": "verify(this.domainEventPublisherService).publishUpdateAllEvent(any(Profile.class))",
            "lineNumber": "1439",
            "errorMessage": "Please Consider to not Use any() as an Argument for : verify(this.domainEventPublisherService).publishUpdateAllEvent(any(Profile.class)) at Line: 1439"
          }
        ]
      }
    ]
  }
]